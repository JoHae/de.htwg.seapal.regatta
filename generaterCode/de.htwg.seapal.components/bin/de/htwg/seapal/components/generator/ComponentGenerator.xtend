/*
 * generated by Xtext
 */
package de.htwg.seapal.components.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider
import de.htwg.seapal.components.component.Interface
import de.htwg.seapal.components.component.Import
import de.htwg.seapal.components.component.Property
import de.htwg.seapal.components.component.Method
import de.htwg.seapal.components.component.Component
import de.htwg.seapal.components.component.Rootpackage
import org.eclipse.xtext.naming.QualifiedName

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class ComponentGenerator implements IGenerator {

	@Inject extension IQualifiedNameProvider nameProvider

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val mock = "mock"
		val impl = "impl"
		var compName = org::eclipse::xtext::naming::QualifiedName::EMPTY;		
		
		for (e: resource.allContents.toIterable.filter(typeof(Component))) {
			compName = e.fullyQualifiedName;
		}
		
		for (e: resource.allContents.toIterable.filter(typeof(Rootpackage))) {
			
			fsa.generateFile(
				e.fullyQualifiedName.skipFirst(1).toString.replace(".", "/") + "/app/" + compName + "DemoMockModule" + ".java",
				e.generateModuleClass(compName, mock))
				
			fsa.generateFile(
				e.fullyQualifiedName.skipFirst(1).toString.replace(".", "/") + "/app/" + compName + "DemoImplModule" + ".java",
				e.generateModuleClass(compName, impl))
		}
		

		for (e : resource.allContents.toIterable.filter(typeof(Interface))) {
			// Generate Interface
			fsa.generateFile(e.fullyQualifiedName.skipFirst(1).toString.replace(".", "/") + ".java", e.generateInterface)
			
			// Generate Mock Class
			fsa.generateFile(
				e.fullyQualifiedName.skipFirst(1).skipLast(1).toString("/") + "/" + mock + "/" + getClassName(e.fullyQualifiedName.lastSegment)
					+ ".java", e.generateClass(mock))
					
			// Generate Impl Class
			fsa.generateFile(
				e.fullyQualifiedName.skipFirst(1).skipLast(1).toString("/") + "/" + impl + "/" + getClassName(e.fullyQualifiedName.lastSegment)
					+ ".java", e.generateClass(impl))
		}
	}

	def generateClass(Interface i, String classType) '''
	«i.generateHeader(classType)»

	public class « getClassName(i.name)» implements «i.name» {
		«FOR p:i.properties»
			«IF p != null »
			private «p.type.fullyQualifiedName.lastSegment» «p.name»;
			«ENDIF»
		«ENDFOR»
	
		«FOR p:i.properties»
			@Override
			«p.generateGetterHead» {
				return «p.name»;
			}

			@Override
			«p.generateSetterHead» {
				this.«p.name» = «p.name»;
			}
			
		«ENDFOR»
	
		«FOR m:i.methods»
			@Override
			«m.generateMethodHead» {
				//TODO
				«IF m.type.name == "boolean"»return false;«ELSEIF m.type.name != "void"»return null;«ENDIF»
			}
		«ENDFOR»
	}'''

	def generateInterface(Interface i) '''
	«i.generateHeader(null)»
		
	public interface «i.name» {
		«FOR p:i.properties»
		«p.generateGetterHead»;
		«p.generateSetterHead»;
		
		«ENDFOR»
	
		«FOR m:i.methods»
		«m.generateMethodHead»;
		«ENDFOR»
	}
	'''
	
	def generateHeader(Interface i, String packageE) '''
		«IF i.eContainer != null»
			«IF packageE != null»
			package «i.eContainer.fullyQualifiedName.skipFirst(1)».«packageE»;
			«ELSE»
			package «i.eContainer.fullyQualifiedName.skipFirst(1)»;
			«ENDIF»
			
			«FOR imp:i.eContainer.eContents.filter(typeof(Import))»
			import «imp.importedNamespace»;
			«ENDFOR»
	«ENDIF»
	'''
	
	def generateMethodHead(Method m) '''public «m.type.fullyQualifiedName.lastSegment» «m.name.toFirstLower»(«FOR prm:m.parameters SEPARATOR ", "»«prm.type.fullyQualifiedName.lastSegment» «prm.name»«ENDFOR»)'''
	
	def generateGetterHead(Property p) '''public «p.type.fullyQualifiedName.lastSegment» get«p.name.toFirstUpper»()'''
	
	def generateSetterHead(Property p) '''public void set«p.name.toFirstUpper»(«p.type.fullyQualifiedName.lastSegment» «p.name»)'''
		
	def getClassName(String string) {
		string.substring(1).toFirstUpper;
	}
	
	def getPackageSubName(String string) {
		string.substring(1).toFirstLower;
	}
	
	def generateModuleClass(Rootpackage root, QualifiedName compName, String type) '''
package «root.fullyQualifiedName.skipFirst(1)».app;

import com.google.inject.AbstractModule;

import «root.fullyQualifiedName.skipFirst(1)».controllers.I«compName»Controller;
import «root.fullyQualifiedName.skipFirst(1)».database.I«compName»Database;
import «root.fullyQualifiedName.skipFirst(1)».models.I«compName»;

public class «compName»Demo«type.toFirstUpper»Module extends AbstractModule {

	@Override
	protected void configure() {
		bind(I«compName».class).to(«root.fullyQualifiedName.skipFirst(1)».models.«type».«compName».class);
		bind(I«compName»Controller.class).to(«root.fullyQualifiedName.skipFirst(1)».controllers.«type».«compName»Controller.class);
		bind(I«compName»Database.class).to(«root.fullyQualifiedName.skipFirst(1)».database.«type».«compName»EbeanDatabase.class);
	}
}
	'''
}
