/**
 * generated by Xtext
 */
package de.htwg.seapal.components.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import de.htwg.seapal.components.component.Component;
import de.htwg.seapal.components.component.Import;
import de.htwg.seapal.components.component.Interface;
import de.htwg.seapal.components.component.Method;
import de.htwg.seapal.components.component.Property;
import de.htwg.seapal.components.component.Rootpackage;
import de.htwg.seapal.components.component.Type;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class ComponentGenerator implements IGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider nameProvider;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    final String mock = "mock";
    final String impl = "impl";
    QualifiedName compName = QualifiedName.EMPTY;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Component> _filter = Iterables.<Component>filter(_iterable, Component.class);
    for (final Component e : _filter) {
      QualifiedName _fullyQualifiedName = this.nameProvider.getFullyQualifiedName(e);
      compName = _fullyQualifiedName;
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<Rootpackage> _filter_1 = Iterables.<Rootpackage>filter(_iterable_1, Rootpackage.class);
    for (final Rootpackage e_1 : _filter_1) {
      {
        QualifiedName _fullyQualifiedName_1 = this.nameProvider.getFullyQualifiedName(e_1);
        QualifiedName _skipFirst = _fullyQualifiedName_1.skipFirst(1);
        String _string = _skipFirst.toString();
        String _replace = _string.replace(".", "/");
        String _plus = (_replace + "/app/");
        String _plus_1 = (_plus + compName);
        String _plus_2 = (_plus_1 + "DemoMockModule");
        String _plus_3 = (_plus_2 + ".java");
        CharSequence _generateModuleClass = this.generateModuleClass(e_1, compName, mock);
        fsa.generateFile(_plus_3, _generateModuleClass);
        QualifiedName _fullyQualifiedName_2 = this.nameProvider.getFullyQualifiedName(e_1);
        QualifiedName _skipFirst_1 = _fullyQualifiedName_2.skipFirst(1);
        String _string_1 = _skipFirst_1.toString();
        String _replace_1 = _string_1.replace(".", "/");
        String _plus_4 = (_replace_1 + "/app/");
        String _plus_5 = (_plus_4 + compName);
        String _plus_6 = (_plus_5 + "DemoImplModule");
        String _plus_7 = (_plus_6 + ".java");
        CharSequence _generateModuleClass_1 = this.generateModuleClass(e_1, compName, impl);
        fsa.generateFile(_plus_7, _generateModuleClass_1);
      }
    }
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Interface> _filter_2 = Iterables.<Interface>filter(_iterable_2, Interface.class);
    for (final Interface e_2 : _filter_2) {
      {
        QualifiedName _fullyQualifiedName_1 = this.nameProvider.getFullyQualifiedName(e_2);
        QualifiedName _skipFirst = _fullyQualifiedName_1.skipFirst(1);
        String _string = _skipFirst.toString();
        String _replace = _string.replace(".", "/");
        String _plus = (_replace + ".java");
        CharSequence _generateInterface = this.generateInterface(e_2);
        fsa.generateFile(_plus, _generateInterface);
        QualifiedName _fullyQualifiedName_2 = this.nameProvider.getFullyQualifiedName(e_2);
        QualifiedName _skipFirst_1 = _fullyQualifiedName_2.skipFirst(1);
        QualifiedName _skipLast = _skipFirst_1.skipLast(1);
        String _string_1 = _skipLast.toString("/");
        String _plus_1 = (_string_1 + "/");
        String _plus_2 = (_plus_1 + mock);
        String _plus_3 = (_plus_2 + "/");
        QualifiedName _fullyQualifiedName_3 = this.nameProvider.getFullyQualifiedName(e_2);
        String _lastSegment = _fullyQualifiedName_3.getLastSegment();
        String _className = this.getClassName(_lastSegment);
        String _plus_4 = (_plus_3 + _className);
        String _plus_5 = (_plus_4 + ".java");
        CharSequence _generateClass = this.generateClass(e_2, mock);
        fsa.generateFile(_plus_5, _generateClass);
        QualifiedName _fullyQualifiedName_4 = this.nameProvider.getFullyQualifiedName(e_2);
        QualifiedName _skipFirst_2 = _fullyQualifiedName_4.skipFirst(1);
        QualifiedName _skipLast_1 = _skipFirst_2.skipLast(1);
        String _string_2 = _skipLast_1.toString("/");
        String _plus_6 = (_string_2 + "/");
        String _plus_7 = (_plus_6 + impl);
        String _plus_8 = (_plus_7 + "/");
        QualifiedName _fullyQualifiedName_5 = this.nameProvider.getFullyQualifiedName(e_2);
        String _lastSegment_1 = _fullyQualifiedName_5.getLastSegment();
        String _className_1 = this.getClassName(_lastSegment_1);
        String _plus_9 = (_plus_8 + _className_1);
        String _plus_10 = (_plus_9 + ".java");
        CharSequence _generateClass_1 = this.generateClass(e_2, impl);
        fsa.generateFile(_plus_10, _generateClass_1);
      }
    }
  }
  
  public CharSequence generateClass(final Interface i, final String classType) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateHeader = this.generateHeader(i, classType);
    _builder.append(_generateHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _name = i.getName();
    String _className = this.getClassName(_name);
    _builder.append(_className, "");
    _builder.append(" implements ");
    String _name_1 = i.getName();
    _builder.append(_name_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Property> _properties = i.getProperties();
      for(final Property p : _properties) {
        {
          boolean _notEquals = (!Objects.equal(p, null));
          if (_notEquals) {
            _builder.append("\t");
            _builder.append("private ");
            Type _type = p.getType();
            QualifiedName _fullyQualifiedName = this.nameProvider.getFullyQualifiedName(_type);
            String _lastSegment = _fullyQualifiedName.getLastSegment();
            _builder.append(_lastSegment, "	");
            _builder.append(" ");
            String _name_2 = p.getName();
            _builder.append(_name_2, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<Property> _properties_1 = i.getProperties();
      for(final Property p_1 : _properties_1) {
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        CharSequence _generateGetterHead = this.generateGetterHead(p_1);
        _builder.append(_generateGetterHead, "	");
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ");
        String _name_3 = p_1.getName();
        _builder.append(_name_3, "		");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        CharSequence _generateSetterHead = this.generateSetterHead(p_1);
        _builder.append(_generateSetterHead, "	");
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_4 = p_1.getName();
        _builder.append(_name_4, "		");
        _builder.append(" = ");
        String _name_5 = p_1.getName();
        _builder.append(_name_5, "		");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<Method> _methods = i.getMethods();
      for(final Method m : _methods) {
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        CharSequence _generateMethodHead = this.generateMethodHead(m);
        _builder.append(_generateMethodHead, "	");
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("//TODO");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        {
          Type _type_1 = m.getType();
          String _name_6 = _type_1.getName();
          boolean _equals = Objects.equal(_name_6, "boolean");
          if (_equals) {
            _builder.append("return false;");
          } else {
            Type _type_2 = m.getType();
            String _name_7 = _type_2.getName();
            boolean _notEquals_1 = (!Objects.equal(_name_7, "void"));
            if (_notEquals_1) {
              _builder.append("return null;");
            }
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence generateInterface(final Interface i) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateHeader = this.generateHeader(i, null);
    _builder.append(_generateHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("public interface ");
    String _name = i.getName();
    _builder.append(_name, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Property> _properties = i.getProperties();
      for(final Property p : _properties) {
        _builder.append("\t");
        CharSequence _generateGetterHead = this.generateGetterHead(p);
        _builder.append(_generateGetterHead, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _generateSetterHead = this.generateSetterHead(p);
        _builder.append(_generateSetterHead, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<Method> _methods = i.getMethods();
      for(final Method m : _methods) {
        _builder.append("\t");
        CharSequence _generateMethodHead = this.generateMethodHead(m);
        _builder.append(_generateMethodHead, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHeader(final Interface i, final String packageE) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _eContainer = i.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        {
          boolean _notEquals_1 = (!Objects.equal(packageE, null));
          if (_notEquals_1) {
            _builder.append("package ");
            EObject _eContainer_1 = i.eContainer();
            QualifiedName _fullyQualifiedName = this.nameProvider.getFullyQualifiedName(_eContainer_1);
            QualifiedName _skipFirst = _fullyQualifiedName.skipFirst(1);
            _builder.append(_skipFirst, "");
            _builder.append(".");
            _builder.append(packageE, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("package ");
            EObject _eContainer_2 = i.eContainer();
            QualifiedName _fullyQualifiedName_1 = this.nameProvider.getFullyQualifiedName(_eContainer_2);
            QualifiedName _skipFirst_1 = _fullyQualifiedName_1.skipFirst(1);
            _builder.append(_skipFirst_1, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        {
          EObject _eContainer_3 = i.eContainer();
          EList<EObject> _eContents = _eContainer_3.eContents();
          Iterable<Import> _filter = Iterables.<Import>filter(_eContents, Import.class);
          for(final Import imp : _filter) {
            _builder.append("import ");
            String _importedNamespace = imp.getImportedNamespace();
            _builder.append(_importedNamespace, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateMethodHead(final Method m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    Type _type = m.getType();
    QualifiedName _fullyQualifiedName = this.nameProvider.getFullyQualifiedName(_type);
    String _lastSegment = _fullyQualifiedName.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" ");
    String _name = m.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append("(");
    {
      EList<Property> _parameters = m.getParameters();
      boolean _hasElements = false;
      for(final Property prm : _parameters) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        Type _type_1 = prm.getType();
        QualifiedName _fullyQualifiedName_1 = this.nameProvider.getFullyQualifiedName(_type_1);
        String _lastSegment_1 = _fullyQualifiedName_1.getLastSegment();
        _builder.append(_lastSegment_1, "");
        _builder.append(" ");
        String _name_1 = prm.getName();
        _builder.append(_name_1, "");
      }
    }
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence generateGetterHead(final Property p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    Type _type = p.getType();
    QualifiedName _fullyQualifiedName = this.nameProvider.getFullyQualifiedName(_type);
    String _lastSegment = _fullyQualifiedName.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" get");
    String _name = p.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("()");
    return _builder;
  }
  
  public CharSequence generateSetterHead(final Property p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public void set");
    String _name = p.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("(");
    Type _type = p.getType();
    QualifiedName _fullyQualifiedName = this.nameProvider.getFullyQualifiedName(_type);
    String _lastSegment = _fullyQualifiedName.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" ");
    String _name_1 = p.getName();
    _builder.append(_name_1, "");
    _builder.append(")");
    return _builder;
  }
  
  public String getClassName(final String string) {
    String _substring = string.substring(1);
    String _firstUpper = StringExtensions.toFirstUpper(_substring);
    return _firstUpper;
  }
  
  public String getPackageSubName(final String string) {
    String _substring = string.substring(1);
    String _firstLower = StringExtensions.toFirstLower(_substring);
    return _firstLower;
  }
  
  public CharSequence generateModuleClass(final Rootpackage root, final QualifiedName compName, final String type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    QualifiedName _fullyQualifiedName = this.nameProvider.getFullyQualifiedName(root);
    QualifiedName _skipFirst = _fullyQualifiedName.skipFirst(1);
    _builder.append(_skipFirst, "");
    _builder.append(".app;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.AbstractModule;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    QualifiedName _fullyQualifiedName_1 = this.nameProvider.getFullyQualifiedName(root);
    QualifiedName _skipFirst_1 = _fullyQualifiedName_1.skipFirst(1);
    _builder.append(_skipFirst_1, "");
    _builder.append(".controllers.I");
    _builder.append(compName, "");
    _builder.append("Controller;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    QualifiedName _fullyQualifiedName_2 = this.nameProvider.getFullyQualifiedName(root);
    QualifiedName _skipFirst_2 = _fullyQualifiedName_2.skipFirst(1);
    _builder.append(_skipFirst_2, "");
    _builder.append(".database.I");
    _builder.append(compName, "");
    _builder.append("Database;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    QualifiedName _fullyQualifiedName_3 = this.nameProvider.getFullyQualifiedName(root);
    QualifiedName _skipFirst_3 = _fullyQualifiedName_3.skipFirst(1);
    _builder.append(_skipFirst_3, "");
    _builder.append(".models.I");
    _builder.append(compName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(compName, "");
    _builder.append("Demo");
    String _firstUpper = StringExtensions.toFirstUpper(type);
    _builder.append(_firstUpper, "");
    _builder.append("Module extends AbstractModule {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void configure() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bind(I");
    _builder.append(compName, "		");
    _builder.append(".class).to(");
    QualifiedName _fullyQualifiedName_4 = this.nameProvider.getFullyQualifiedName(root);
    QualifiedName _skipFirst_4 = _fullyQualifiedName_4.skipFirst(1);
    _builder.append(_skipFirst_4, "		");
    _builder.append(".models.");
    _builder.append(type, "		");
    _builder.append(".");
    _builder.append(compName, "		");
    _builder.append(".class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("bind(I");
    _builder.append(compName, "		");
    _builder.append("Controller.class).to(");
    QualifiedName _fullyQualifiedName_5 = this.nameProvider.getFullyQualifiedName(root);
    QualifiedName _skipFirst_5 = _fullyQualifiedName_5.skipFirst(1);
    _builder.append(_skipFirst_5, "		");
    _builder.append(".controllers.");
    _builder.append(type, "		");
    _builder.append(".");
    _builder.append(compName, "		");
    _builder.append("Controller.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("bind(I");
    _builder.append(compName, "		");
    _builder.append("Database.class).to(");
    QualifiedName _fullyQualifiedName_6 = this.nameProvider.getFullyQualifiedName(root);
    QualifiedName _skipFirst_6 = _fullyQualifiedName_6.skipFirst(1);
    _builder.append(_skipFirst_6, "		");
    _builder.append(".database.");
    _builder.append(type, "		");
    _builder.append(".");
    _builder.append(compName, "		");
    _builder.append("EbeanDatabase.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
